import os
import time
import logging

from dotenv import load_dotenv

from bugxplainer.ghclient import GitHubClient
from bugxplainer.gptclient import ChatGPTClient

logging.basicConfig(level=logging.INFO)

load_dotenv()
repo = os.getenv("REPO")
gh_token = os.getenv("GITHUB_TOKEN")
api_key = os.getenv("OPENAI_API_KEY")
gpt_comment = "This is an automated comment by ChatGPT (version: gpt-3.5-turbo)."


def main():
    # TODO: idea1: explain failed workflow as comment in PR
    #  idea2: if user comments on GPTs answer with question, answer, otherwise ignore
    #       -> preserve conversation context for asynchronous conversations
    #           that's already implemented, but we can think about how to preprocess
    #           the context before resuming the conversation
    logging.info("Starting BugXplainer")
    github_client = GitHubClient(gh_token, repo)
    chatgpt_client = ChatGPTClient(api_key)

    # We only want to work on new issues, so we're not saving the issues
    # that already exist to our in memory cache
    last_checked_issue = github_client.get_latest_issue_number()
    while True:
        latest_issue = github_client.get_latest_issue_number()
        if latest_issue > last_checked_issue:
            logging.info(f"New issue found: {latest_issue}")
            github_client.add_issue_to_cache(latest_issue)
            issue_content = github_client.get_issue_content(latest_issue)
            if issue_content == "":
                logging.info(f"Empty issue, skipping {latest_issue}")
                continue
            response = chatgpt_client.generate_issue_response(
                latest_issue, issue_content
            )
            github_client.post_comment(
                latest_issue,
                f"{gpt_comment} \n\n" f"{response}",
            )
            logging.info("Response generated and posted")
            last_checked_issue = latest_issue
            github_client.update_comments(latest_issue)
        # Now track issues that have been responded to for new comments
        for issue_number in github_client.issues:
            logging.info(f"Checking for new comments on issue {issue_number}")
            comments = github_client.get_issue_comments(issue_number)
            if comments != github_client.issues[issue_number]["comments"]:
                logging.info(f"New comment found for issue {issue_number}")
                github_client.update_comments(issue_number, comments)
                new_comment = comments[-1]
                if new_comment["body"].startswith(f"{gpt_comment}"):
                    logging.info("Comment was generated by ChatGPT, skipping")
                    continue
                # Respond to questions
                response = chatgpt_client.generate_comment_response(
                    issue_number, new_comment["body"]
                )
                logging.info(f"Response: {response}")
                if not response.lower().startswith("ignore"):
                    github_client.post_comment(
                        issue_number,
                        f"{gpt_comment} \n\n" f"{response}",
                    )
                    logging.info("Comment response generated and posted")
            else:
                logging.info(f"No new comments found for issue {issue_number}")
        time.sleep(2)


if __name__ == "__main__":
    main()
